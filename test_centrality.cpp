#include<iostream>
#include<algorithm>
#include <queue>
#include <set>
#include <vector>
#include <time.h>
#include <cmath>
#include "log.h"

using namespace std;
int main(){
    /*   
    int zero = 0;
    double name;
    if(zero == 0){
        name = 0;
    }else{
        name = zero*1.0 /10000;
    }
    
    printf("%f is in loop\n",name);
    */
    InfGraph g = buildGraph("graph_spa_500_10_tp");
    // double epsilon_prime = arg.epsilon * sqrt(2);
    // int64 ci = (2+2/3 * epsilon_prime)* ( log(g.numVert) + Math::logcnk(g.numVert, arg.k) + log(Math::log2(g.numVert))) * pow(2.0, x) / (epsilon_prime* epsilon_prime);
    printf("there are %d nodes\n",g.numVert);
    // vector<int> see;
    // see = vector<bool> (10);
    // for (int i = 0; i < see.size(); i++)
    // {         
    //     see[i] = i;         
    // } 
    // printf("does is exist? %d",see[1]);
    int MC = 1000;
    int BUDGET = 109;
    double EPSILON = 0.01;
    int TEST = 10;
    string method = "centrality";
    inPut in ={.BUDGET =BUDGET,.MCROUNDS= MC, .EPSILON = EPSILON,.dataset = "graph_spa_500_10_tp", .SAMPLE_ROUND= 100, .ALPHA = 0.1};
    vector <double> influence(BUDGET);
    // int *counter = (int*)malloc(sizeof(int)*g.numVert);
    queue<int> s;
    s.push(2);

    vector<int> seed_centrality_increse ={263, 266, 12, 26, 75, 280, 24, 35, 481, 20, 66, 223, 270, 275, 285, 33, 47, 307, 29, 240, 265, 301, 289, 292, 238, 13, 22, 30, 55, 464, 492, 269, 291, 276, 16, 95, 50, 73, 99, 264, 330, 317, 367, 5, 18, 19, 36, 98, 58, 96, 256, 273, 271, 283, 278, 288, 337, 353, 391, 14, 27, 59, 37, 139, 479, 117, 150, 67, 68, 130, 129, 135, 185, 147, 146, 461, 194, 228, 295, 306, 272, 281, 282, 296, 274, 299, 384, 413, 313, 309, 414, 9, 23, 31, 57, 82, 41, 65, 62, 221, 213, 126, 69, 123, 105, 118, 104, 119, 163, 222, 178, 131, 239, 277, 300, 311, 365, 378, 267, 314, 287, 349, 402, 286, 327, 338, 328, 386, 387, 397, 350, 321, 336, 345, 342, 356, 395, 433, 411, 485, 0, 3, 4, 15, 28, 64, 132, 261, 61, 89, 17, 80, 43, 21, 134, 107, 137, 42, 56, 77, 87, 113, 79, 32, 148, 172, 173, 46, 151, 207, 72, 112, 149, 88, 157, 154, 203, 136, 142, 206, 196, 225, 226, 242, 244, 308, 425, 371, 449, 340, 302, 361, 423, 298, 454, 303, 385, 304, 381, 422, 364, 379, 372, 323, 424, 358, 333, 394, 351, 374, 444, 393, 383, 460, 369, 428, 405, 409, 410, 416, 465, 466, 482, 6, 8, 45, 49, 175, 214, 34, 78, 25, 51, 85, 40, 54, 138, 122, 74, 190, 200, 86, 52, 83, 177, 216, 84, 92, 164, 115, 155, 174, 76, 128, 166, 199, 103, 108, 179, 106, 141, 97, 133, 181, 167, 230, 232, 247, 255, 339, 268, 310, 326, 455, 457, 419, 293, 324, 341, 389, 408, 380, 305, 348, 355, 388, 407, 319, 390, 363, 400, 418, 359, 406, 312, 445, 347, 412, 357, 352, 382, 360, 429, 453, 437, 470, 471, 487, 489, 497, 498, 10, 38, 48, 91, 44, 100, 60, 191, 198, 184, 168, 140, 188, 205, 125, 145, 39, 71, 93, 116, 110, 202, 165, 217, 193, 209, 212, 90, 102, 111, 143, 127, 120, 153, 219, 161, 231, 235, 236, 229, 234, 233, 245, 250, 241, 249, 251, 252, 243, 257, 259, 290, 431, 373, 279, 446, 334, 316, 335, 440, 294, 415, 398, 399, 396, 438, 377, 318, 442, 452, 375, 421, 430, 376, 436, 401, 420, 462, 469, 474, 483, 484, 486, 494, 493, 495, 499, 1, 2, 7, 11, 192, 211, 187, 169, 81, 94, 121, 171, 114, 63, 124, 53, 180, 170, 210, 101, 70, 201, 218, 208, 156, 144, 109, 158, 189, 215, 160, 159, 197, 204, 186, 195, 162, 176, 183, 152, 182, 220, 224, 227, 237, 254, 253, 246, 248, 258, 260, 262, 404, 346, 362, 320, 427, 343, 284, 297, 322, 329, 354, 403, 366, 315, 325, 447, 344, 392, 332, 426, 443, 459, 368, 331, 370, 432, 451, 439, 435, 450, 417, 458, 441, 448, 434, 456, 463, 475, 467, 476, 468, 473, 478, 472, 477, 480, 488, 491, 490, 496};
    vector<int> seed_centrality = {1, 2, 7, 11, 192, 211, 187, 169, 81, 94, 121, 171, 114, 63, 124, 53, 180, 170, 210, 101, 70, 201, 218, 208, 156, 144, 109, 158, 189, 215, 160, 159, 197, 204, 186, 195, 162, 176, 183, 152, 182, 220, 224, 227, 237, 254, 253, 246, 248, 258, 260, 262, 404, 346, 362, 320, 427, 343, 284, 297, 322, 329, 354, 403, 366, 315, 325, 447, 344, 392, 332, 426, 443, 459, 368, 331, 370, 432, 451, 439, 435, 450, 417, 458, 441, 448, 434, 456, 463, 475, 467, 476, 468, 473, 478, 472, 477, 480, 488, 491, 490, 496, 10, 38, 48, 91, 44, 100, 60, 191, 198, 184, 168, 140, 188, 205, 125, 145, 39, 71, 93, 116, 110, 202, 165, 217, 193, 209, 212, 90, 102, 111, 143, 127, 120, 153, 219, 161, 231, 235, 236, 229, 234, 233, 245, 250, 241, 249, 251, 252, 243, 257, 259, 290, 431, 373, 279, 446, 334, 316, 335, 440, 294, 415, 398, 399, 396, 438, 377, 318, 442, 452, 375, 421, 430, 376, 436, 401, 420, 462, 469, 474, 483, 484, 486, 494, 493, 495, 499, 6, 8, 45, 49, 175, 214, 34, 78, 25, 51, 85, 40, 54, 138, 122, 74, 190, 200, 86, 52, 83, 177, 216, 84, 92, 164, 115, 155, 174, 76, 128, 166, 199, 103, 108, 179, 106, 141, 97, 133, 181, 167, 230, 232, 247, 255, 339, 268, 310, 326, 455, 457, 419, 293, 324, 341, 389, 408, 380, 305, 348, 355, 388, 407, 319, 390, 363, 400, 418, 359, 406, 312, 445, 347, 412, 357, 352, 382, 360, 429, 453, 437, 470, 471, 487, 489, 497, 498, 0, 3, 4, 15, 28, 64, 132, 261, 61, 89, 17, 80, 43, 21, 134, 107, 137, 42, 56, 77, 87, 113, 79, 32, 148, 172, 173, 46, 151, 207, 72, 112, 149, 88, 157, 154, 203, 136, 142, 206, 196, 225, 226, 242, 244, 308, 425, 371, 449, 340, 302, 361, 423, 298, 454, 303, 385, 304, 381, 422, 364, 379, 372, 323, 424, 358, 333, 394, 351, 374, 444, 393, 383, 460, 369, 428, 405, 409, 410, 416, 465, 466, 482, 9, 23, 31, 57, 82, 41, 65, 62, 221, 213, 126, 69, 123, 105, 118, 104, 119, 163, 222, 178, 131, 239, 277, 300, 311, 365, 378, 267, 314, 287, 349, 402, 286, 327, 338, 328, 386, 387, 397, 350, 321, 336, 345, 342, 356, 395, 433, 411, 485, 14, 27, 59, 37, 139, 479, 117, 150, 67, 68, 130, 129, 135, 185, 147, 146, 461, 194, 228, 295, 306, 272, 281, 282, 296, 274, 299, 384, 413, 313, 309, 414, 5, 18, 19, 36, 98, 58, 96, 256, 273, 271, 283, 278, 288, 337, 353, 391, 16, 95, 50, 73, 99, 264, 330, 317, 367, 238, 13, 22, 30, 55, 464, 492, 269, 291, 276, 29, 240, 265, 301, 289, 292, 33, 47, 307, 20, 66, 223, 270, 275, 285, 24, 35, 481, 280, 26, 75, 12, 266, 263};

    vector<double> tim ={0};
    vector<double> maxinf;
    queue<int> myopic_py_select;


    // srandx(time(NULL));
    // srand (time(NULL));
    cout<<"random generation"<<endl;
    for(int i=0;i<100;i++){
        int name = randx();
        double fix = randam();
        printf("name is: %d ",name);
        printf( "fix is %f\n",fix);
    }
    
    double sprd;
    
    for(int i = 1;i<TEST;i++){
        for(int i=0;i<seed_centrality_increse.size();i++){
            int node = seed_centrality_increse[i];
            // cout<<seed[i]<<" ";
            // myopic_py_select.push(node);
            // pair<double,int> round =icExp_lazy(g, myopic_py_select, MC,EPSILON);
            // maxinf.push_back(round.first);
            myopic_py_select.push(node);
            float* counter = icExp_lazy(g, myopic_py_select, MC);
            // // printf("in budget %d",i);
            // for(int j =0;j<g.numVert;j++){
            //     // const auto& count = count/mc;
            //     if(counter[j] ==0){
            //         cout<<counter[j]<<" " << j << " ";

            //     }

            // }
            
            double min_expect = *min_element(counter+0, counter+g.numVert);
            min_expect = min_expect*1.0/MC;

            maxinf.push_back(min_expect);
            // printf("selecting node %d with %f influence\n", i, min_expect);
            // float* counter = icExp_hyperG(g, myopic_py_select, MC);
            // double min = *min_element(counter+0,counter+g.numVert);
            // maxinf.push_back(min);
        }
        for(int j = 0;j<BUDGET;j++){
            sprd = maxinf[j];
            // double clock = res.time[j];
            
            influence[j] += sprd;
            // time[j] += clock;
        }  
      printf("we've finished %d round test\n",i);


    }      
    for(int j = 0;j<BUDGET;j++){
        influence[j] = influence[j]*1.0/TEST;
        // time[j] = time[j]*1.0/TEST;
    }
    values res ={seed_centrality_increse,influence,tim};
    logRec(g, res, in, method);
    /**/

}